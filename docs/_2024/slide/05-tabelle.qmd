---
title: '[Tabelle]{style="color:darkorange;"}'
subtitle: "~30 min"
format:
  revealjs:
    width:  1648 #(3/2)
    height: 1080
    logo: img/UBEP.png
    footer: "SSCG Informatica di Base - I anno"
    slide-number: true
    history: false
    preview-links: auto
    code-link: true
    chalkboard:
      src: src/chalkboard-tabelle.json
bibliography: references.bib
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(
  echo = TRUE
)
library(dplyr)
library(countdown)
```

# R base

## R base - tabelle

::: columns
::: {.column width="50%"}
```{r}
#| output: false
data("mtcars")
single <- table(mtcars$cyl)
single

cross <- table(mtcars$cyl, mtcars$gear)
cross
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
single
cross
```
:::
:::

# Summary tables

## Cosa sono le tabelle riassuntive?

- Un modo per presentare le statistiche descrittive e i risultati dei modelli statistici in un formato tabellare.

Come ggplot per i grafici, `{gtsummary}` è un pacchetto che facilita la creazione di tabelle riassuntive in R. È basato sul pacchetto `{gt}`, che è una "grammatica delle tabelle" e segue la stessa filosofia di `{ggplot2}`.

![](img/gt_parts_of_a_table.svg)

# Statistica descrittiva - <small>riassumere i dati</small>

## `tbl_summary()` - funzione base

- La funzione `tbl_summary()` è usata per riassumere i dati in un formato tabellare.
- Calcola le statistiche descrittive per variabili continue, categoriche e dicotomiche in R e presenta i risultati in una bella tabella riassuntiva personalizzabile, pronta per la pubblicazione (o la presentazione).
- Adotta la sintassi dplyr per riassumere i dati:
    - utilizza l'operatore pipe `|>` per concatenare le funzioni
    - utilizza gli stessi selettori della funzione `dplyr::select()` per selezionare le variabili, ad esempio `starts_with()`, `ends_with()`, `contains()`, `matches()`, `everything()`, ecc.

## `tbl_summary()` - Argomenti principali

- `data` - la struttura dei dati da riassumere (che può essere inserita)
- `include` - le variabili da includere nella tabella, cioè la colonna "variabile" della tabella
- `by` - le variabili per cui stratificare la tabella, cioè le variabili che definiscono le colonne *sommario* della tabella. Le statistiche di riepilogo saranno calcolate separatamente per ogni livello della variabile by (ad esempio, by = `trt`).

::: callout-tip
- se `include` non è specificato, tutte le variabili del data frame saranno incluse nella tabella

- se `by` non è specificato, la tabella non sarà stratificata e le statistiche di sintesi saranno calcolate per tutte le variabili del data frame
:::

## `tbl_summary()` - base {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{r}
#| output: false
library(dplyr)
library(gtsummary)

tbl <- trial |>
  tbl_summary()
tbl
```

::: callout-tip
-   non utilizzare alcun argomento per riassumere tutte le variabili nella struttura dei dati
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
tbl
```
:::
:::

## `tbl_summary()` - strata  {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{r}
#| output: false
library(dplyr)
library(gtsummary)

tbl <- trial |>
  tbl_summary(
    by = trt #<<
  )
tbl
```

::: callout-tip
-   utilizzare l'argomento `by` per stratificare la tabella in base a una variabile
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
tbl
```
:::
:::

## `tbl_summary()` - variables I {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{r}
#| output: false
library(dplyr)
library(gtsummary)

tbl <- trial |>
  select(trt, age, grade, response) |> #<<
  tbl_summary(
    by = trt
  )
tbl
```

::: callout-tip
-   per selezionare la variabile di interesse, possiamo inserire una funzione `select()`, oppure...
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
tbl
```
:::
:::

## `tbl_summary()` - variables II {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{r}
#| output: false
#| output-location: default
library(dplyr)
library(gtsummary)

tbl <- trial |>
  tbl_summary(
    by = trt,
    include = c(trt, age, grade, response) #<<
  )
tbl
```

::: callout-tip
-   utilizzare l'argomento `include` per selezionare le variabili di interesse
:::

::: callout-important
- Rileva i tipi di variabili dei dati di input e calcola le statistiche descrittive appropriate.
- Le variabili codificate come 0/1, VERO/FALSO e Sì/No sono presentate in modo dicotomico
- Riconosce i valori NA come "mancanti" e li elenca come sconosciuti
- Stampa automatica degli attributi delle etichette
- Livelli delle variabili rientrati e aggiunta di note a piè di pagina
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
tbl
```
:::
:::

## `tbl_summary()` - types {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{r}
#| output: false
#| output-location: default
library(dplyr)
library(gtsummary)

tbl <- trial |>
  tbl_summary(
    by = trt,
    include = c(trt, age, grade, response),
    type = list( #<<
      response ~ "categorical" #<<
    ) #<<
  )
tbl
```

::: callout-tip
-   utilizzare l'argomento `type` per specificare i tipi di variabili, ad esempio per modificare il comportamento predefinito delle variabili dicotomiche, in modo che siano trattate come categoriche standard (cioè, mostrando ogni livello su una riga separata).
:::

::: callout-important
-   La sintassi è `variable ~ "type"`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
tbl
```

::: callout-important
- Rileva i tipi di variabili dei dati di input e calcola le statistiche descrittive appropriate.
- Le variabili codificate come 0/1, VERO/FALSO e Sì/No sono presentate in modo dicotomico
- Riconosce i valori NA come "mancanti" e li elenca come sconosciuti
- Stampa automatica degli attributi delle etichette
- Livelli delle variabili rientrati e aggiunta di note a piè di pagina
:::
:::
:::

## `tbl_summary()` - percent {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{r}
#| output: false
#| output-location: default
library(dplyr)
library(gtsummary)

tbl <- trial |>
  tbl_summary(
    by = trt,
    include = c(trt, age, grade, response),
    type = list(
      response ~ "categorical"
    ),
    percent = "row" #<<
  )
tbl
```

::: callout-tip
- utilizzare l'argomento `percent` per calcolare le percentuali all'interno degli strati:
    - `percent = "column"` calcola le percentuali all'interno delle colonne
    - `percent = "row"` calcola le percentuali all'interno delle righe
    - `percent = "cell"` calcola le percentuali all'interno delle celle della variabile complessiva
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
tbl
```
:::
:::

## `tbl_summary()` - labels {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{r}
#| output: false
#| output-location: default
library(dplyr)
library(gtsummary)

tbl <- trial |>
  tbl_summary(
    by = trt,
    include = c(trt, age, grade, response),
    type = list(
      response ~ "categorical"
    ),
    label = list(  #<<
      age ~ "Age (years)", #<<
      grade ~ "Grade", #<<
      response ~ "Response" #<<
    ), #<<
    percent = "row"
  )
tbl
```

::: callout-tip
-   utilizzare l'argomento `label` per modificare le etichette delle variabili
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
tbl
```
:::
:::

## `tbl_summary()` - digits {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{r}
#| output: false
#| output-location: default
library(dplyr)
library(gtsummary)

tbl <- trial |>
  tbl_summary(
    by = trt,
    include = c(trt, age, grade, response),
    type = list(
      response ~ "categorical"
    ),
    label = list(
      age ~ "Age (years)",
      grade ~ "Grade",
      response ~ "Response"
    ),
    percent = "row",
    digits = list(
      age ~ 2 #<<
    )
  )
tbl
```

::: callout-tip
-   utilizzare l'argomento `digits` per modificare il numero di cifre mostrate per le variabili continue
:::

::: callout-important
-   La sintassi è `variable ~ digits`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
tbl
```
:::
:::

## `tbl_summary()` - statistics {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{r}
#| output: false
#| output-location: default
library(dplyr)
library(gtsummary)

tbl <- trial |>
  tbl_summary(
    by = trt,
    include = c(trt, age, grade, response),
    type = list(
      response ~ "categorical"
    ),
    label = list(
      age ~ "Age (years)",
      grade ~ "Grade",
      response ~ "Response"
    ),
    percent = "row",
    digits = list(
      age ~ 2
    ),
    statistic = list(  #<<
      all_continuous() ~ "{mean} ({sd})",  #<<
      response ~ "{n} ({p}%)"  #<<
    )  #<<
  )
tbl
```

::: callout-tip
-   utilizzare l'argomento `statistics` per modificare le statistiche di riepilogo
:::

::: callout-important
-   la sintassi è list(`variable ~ "statistic"`)
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
tbl
```
:::
:::

## Statisitcs [overview] {.smaller}

::: columns
::: {.column width="50%"}
Per le variabili categoriche è possibile visualizzare le seguenti statistiche.

- `{n}`: frequenza
- `{N}`: denominatore, o dimensione della coorte
- `{p}`: percentuale formattata

Per le variabili continue sono disponibili le seguenti statistiche.

- `{median}`: mediana
- `{mean}`: media
- `{sd}`: deviazione standard
- `{var}`: varianza
- `{min}`: minimo
- `{max}`: massimo
- `{sum}`: somma
- `{p##}`: qualsiasi percentile intero, dove ## è un intero da 0 a 100
- `{foo}`: è accettata qualsiasi funzione della forma foo(x) dove x è un vettore numerico
:::

::: {.column width="50%"}
Per le variabili categoriche e continue, è possibile visualizzare le statistiche sul numero di osservazioni mancanti e non mancanti e le relative proporzioni.

- `{N_obs}`: numero totale di osservazioni
- `{N_miss}`: numero di osservazioni mancanti
- `{N_nonmiss}`: numero di osservazioni non mancanti
- `{p_miss}`: percentuale di osservazioni mancanti
- `{p_nonmiss}`: percentuale di osservazioni non mancanti
:::
:::

## `tbl_summary()` - adders {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{r}
#| output: false
#| output-location: default
library(dplyr)
library(gtsummary)

tbl <- trial |>
  tbl_summary(
    by = trt,
    include = c(trt, age, grade, response),
    label = list(
      age ~ "Age (years)",
      grade ~ "Grade",
      response ~ "Response"
    ),
    type = list(
      response ~ "categorical"
    ),
    percent = "row",
    digits = list(
      age ~ 2
    ),
    statistic = list(
      all_continuous() ~ "{mean} ({sd})",
      response ~ "{n} ({p}%)"
    )
  ) |>
  add_n() |>
  add_overall() |>
  add_p()
tbl
```

::: callout-tip
-   utilizzare le funzioni `add_*` per aggiungere statistiche di riepilogo alla tabella
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
tbl
```
:::
:::

## `tbl_summary()` - stylers {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{r}
#| output: false
#| output-location: default
library(dplyr)
library(gtsummary)

tbl <- trial |>
  tbl_summary(
    by = trt,
    include = c(trt, age, grade, response),
    label = list(
      age ~ "Age (years)",
      grade ~ "Grade",
      response ~ "Response"
    ),
    type = list(
      response ~ "categorical"
    ),
    percent = "row",
    digits = list(
      age ~ 2
    ),
    statistic = list(
      all_continuous() ~ "{mean} ({sd})",
      response ~ "{n} ({p}%)"
    )
  ) |>
  add_n() |>
  add_overall() |>
  add_p() |>
  bold_p(t = 0.6) |>
  bold_levels() |>
  bold_labels() |>
  italicize_levels() |>
  italicize_labels()
tbl
```

::: callout-tip
-   utilizzare le funzioni `bold_*` e `italicize_*` per personalizzare la tabella
:::

::: callout-important
-   `bold_p` evidenzia i valori di p inferiori a una determinata soglia
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
tbl
```
:::
:::



# Cross-tables - riassumere relazioni

## `tbl_cross()` {auto-animate="true"}

-   La funzione `tbl_cross()` viene utilizzata per riassumere le relazioni tra le variabili in un formato tabellare.

```{r}
library(dplyr)
library(gtsummary)

trial |>
  tbl_cross(
    row = trt,
    col = grade
  )
```

## `tbl_cross()` {auto-animate="true"}

-   La funzione `tbl_cross()` viene utilizzata per riassumere le relazioni tra le variabili in un formato tabellare.

```{r}
library(dplyr)
library(gtsummary)

trial |>
  tbl_cross(
    row = trt,
    col = grade,
    percent = "row",
  ) |>
  add_p()
```

::: callout-tip
-   `tbl_cross` può usare gli stessi argomenti, sommatori e stili di `tbl_summary`.
:::


## `gtsave` {auto-animate="true"}

-   La funzione `gtsave()` è usata per salvare le tabelle di gtsummary come immagini o file HTML.

```{r}
#| eval: false
library(dplyr)
library(gtsummary)

tbl <- trial |>
  tbl_summary(
    by = trt,
    include = c(trt, age, grade, response),
    type = list(response ~ "categorical")
  )

as_gt(tbl) |>
  gt::gtsave("trial.png")

as_gt(tbl) |>
  gt::gtsave("trial.pdf")

as_gt(tbl) |>
  gt::gtsave("trial.docx")

# ...and so on
```

::: callout-tip
-   `gtsave` può salvare le tabelle come file HTML, PNG, JPG, DOCX, RTF, TEX o PDF; è sufficiente impostare l'estensione del file nell'argomento filename.
:::


## Il Vostro turno

- usando la funzione `here` e `import` di `{rio}` importate il dataset `Copenhagen_clean.xlsx` (nella cartella `data-raw`).
- usate la funzione `tbl_summary()` per creare una tabella riassuntiva delle variabili `età`, `sesso`, `bmi`, `outcome` stratificata per `trattamento`.
- usate la funzione `tbl_cross()` per creare una tabella di contingenza tra `sesso` e `outcome`, calcolando le percentuali sulle righe e aggiungendo il p-value del test del chi-quadro.


```{r}
#| echo: false
countdown(
  minutes = 3,
  left = "25%",
  right = "25%",
  top = "70%",
  bottom = 0,
  blink_colon = TRUE,
  play_sound = TRUE,
  margin = "5%",
  font_size = "4em"
)
```


## Riconoscimenti

Per creare questa lezione ho esplorato, utilizzato e adattato i contenuti delle seguenti risorse:

-   Materiale del corso [Carpentries](https://carpentries.org/)' [Programming with R](https://swcarpentry.github.io/r-novice-inflammation/).
-   [Carpentries](https://carpentries.org/)' [R for Reproducible Scientific Analysis](https://swcarpentry.github.io/r-novice-gapminder/).
-   [Hadley Wickham](https://hadley.nz/) [Advanced R - (2e)](https://adv-r.hadley.nz)
-   [R for Data Science (2e)](https://hadley.nz/) di [Hadley Wickham](https://r4ds.hadley.nz/)
-   [Daniel D. Sjoberg](https://www.danieldsjoberg.com/)'s [gtsummary](https://www.danieldsjoberg.com/gtsummary).
-   [Daniel D. Sjoberg](https://www.danieldsjoberg.com/)'s [Presentation-Ready Summary Tables with gtsummary](https://education.rstudio.com/blog/2020/07/gtsummary/).

Le diapositive sono state realizzate utilizzando [Posit](https://posit.co/) [Quarto](https://quarto.org/), sistema open-source di editoria scientifica e tecnica alimentato in R da [kintr](https://yihui.org/knitr/) (creato da [Yihui Xie](https://yihui.org/) ).

### License

```{=html}
 <p xmlns:cc="http://creativecommons.org/ns#" ><a rel="cc:attributionURL" href="https://github.com/CorradoLanera/sscg-informatica">Questo lavoro</a> di <a rel="cc:attributionURL dct:creator" property="cc:attributionName" href="https://github.com/CorradoLanera">Corrado Lanera</a> è offerto sotto licenza <a href="http://creativecommons.org/licenses/by/4.0/?ref=chooser-v1" target="_blank" rel="license noopener noreferrer" style="display:inline-block;">CC BY 4.0<img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1"><img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1"></a></p>
```
