---
title: '[Fondamentali]{style="color:darkorange;"}'
subtitle: "~15 min"
format:
  revealjs:
    width:  1648 #(3/2)
    height: 1080
    logo: img/UBEP.png
    footer: "SSCG Informatica di Base - I anno"
    slide-number: true
    history: false
    preview-links: auto
    code-link: true
    chalkboard:
      src: src/chalkboard-fondamentali.json
bibliography: references.bib
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(
  echo = TRUE
)
library(tidyverse)
library(countdown)
```


# Architettura di un computer

![](img/schema-computer.jpg)

# R/RStudio

------------------------------------------------------------------------

<br>

![](img/concept-map/Slide1.PNG)

------------------------------------------------------------------------

<br>

![](img/concept-map/Slide2.PNG)

------------------------------------------------------------------------

<br>

![](img/concept-map/Slide3.PNG)

------------------------------------------------------------------------

<br>

![](img/concept-map/Slide4.PNG)

------------------------------------------------------------------------

<br>

![](img/concept-map/Slide5.PNG)

------------------------------------------------------------------------

<br>

![](img/concept-map/Slide6.PNG)

------------------------------------------------------------------------

<br>

![](img/concept-map/Slide7.PNG)

------------------------------------------------------------------------

<br>

![](img/concept-map/Slide8.PNG)

------------------------------------------------------------------------

<br>

![](img/concept-map/Slide9.PNG)

------------------------------------------------------------------------

<br>

![](img/concept-map/Slide10.PNG)

## R

-   Un linguaggio: scriviamo il codice R in linguaggio R.

    ``` r
    due <- sum(1 + 1)
    ```

. . .

-   Un motore: in grado di eseguire calcoli, analisi, grafici, report, ...

    ```{r}
    #| output-location: column
    library(tidyverse)

    mtcars |>
      ggplot(aes(hp, mpg)) +
      geom_point(aes(colour = cyl)) +
      labs(
        x = "Gross horsepower",
        y = "Miles/(US) gallon",
        colour = "N cylinders"
      )
    ```

. . .

-   Un interprete (che traduce il codice R avanti e indietro in codice eseguibile)

    - Quando *eseguiamo* il codice in linguaggio R, l'interprete lo traduce per l'esecuzione.
    - Quando R ha calcolato i risultati, l'interprete li traduce/stampa.

    ```{r}
    sum(1:3)
    ```

## RStudio Cloud

- Un IDE RStudio completamente funzionale sul cloud.

- Da utilizzare gratuitamente all'interno dell'area di lavoro del corso.[^2]

- Una volta entrati nell'area di lavoro, è possibile attivare il progetto R fornito per la giornata.

- L'ambiente è già pronto per voi

[^2]: È necessario un account gratuito per unirsi agli spazi di lavoro. Se non ne avete già uno, l'iscrizione al nostro spazio di lavoro vi reindirizzerà prima alla pagina di iscrizione. Link per iscriversi: [https://bit.ly/sscg-informatica[-rstudio-registrazione]{style="color:darkorange;"}](https://bit.ly/sscg-informatica-rstudio-registrazione).

![](img/posit-cloud.png){.absolute top="35%" left="5%" height="50%"}

## RStudio (nel cloud)

:::::::::: columns
::: {.column width="35%"}
IDE = Ambiente di sviluppo integrato (per lavorare con R)

0. Barra laterale e superiore per la navigazione degli spazi di lavoro e dei progetti.

1.  Editor di testo a più schede per visualizzare, modificare ed eseguire (`CTRL/CMD + ENTER`) il codice nei file di script.

2.  Una console interattiva per l'interprete R.

3.  Panoramica degli oggetti R definiti nella sessione corrente.

4.  Esploratore di file incorporato collegato alla directory di lavoro R della sessione corrente.
:::

:::::::: {.column width="65%"}
![](img/rstudio-full.png){.absolute top="10%" right="10%"}

::: fragment
![](img/rstudio-full-annoted.png){.absolute top="10%" right="10%"}
:::

::: fragment
![](img/rstudio.png){.absolute top="20%" right="5%"}
:::

::: fragment
![](img/rstudio-annoted.png){.absolute top="20%" right="5%"}
:::

::: fragment
![](img/rstudio-notab.png){.absolute top="30%" right="0%"}
:::

::: fragment
![](img/rstudio-notab-annoted.png){.absolute top="30%" right="0%"}
:::
::::::::
::::::::::

> (Dopo la registrazione) Per collegarsi al cloud RStudio: [https://bit.ly/sscg-informatica[-rstudio]{style="color:darkorange;"}](https://bit.ly/sscg-informatica-rstudio)


## Languagio

::: columns
::: {.column width="35%"}
|          |     |
|----------|-----|
| Commenti | `#` |
:::

::: {.column width="65%"}
```{r}
#| output-location: column
# R ignorerà questo!!
1 + 1 # +1 anche questo!!
```
:::
:::

::: columns
::: {.column width="35%"}
|            |      |
|------------|------|
| Assegnazione | `<-` |
:::

::: {.column width="65%"}
```{r}
#| output-location: column
due <- 1 + 1
due
```
:::
:::

::: callout-important
I nomi delle variabili possono contenere solo lettere, numeri, trattini bassi e punti. Devono iniziare con una lettera.
:::

::: columns
::: {.column width="35%"}
|           |                  |
|-----------|------------------|
| funzioni | `fun(arg = val)` |
:::

::: {.column width="65%"}
```{r}
#| output-location: column
# Usare `=` per assegnare i valori agli argomenti
mean(x = c(1, 2, 3))
```
:::
:::

::: columns
::: {.column width="35%"}
|               |           |
|---------------|-----------|
| Manuale funzione | `?fun`    |
| Manuale funzione | `?"<op>"` |
:::

::: {.column width="65%"}

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
#| output-location: column
?sum
?"+"
```
:::

::: {.column width="45%"}
![](img/mean-help-crop.png)
:::
:::
:::
:::

::: columns
::: {.column width="35%"}
|                |     |
|----------------|-----|
| Concatena  | `c` |
:::

::: {.column width="65%"}
```{r}
#| output-location: column
tre_due_uno <- c(3, due, 1)
tre_due_uno
```
:::
:::

::: columns
::: {.column width="35%"}
|              |      |
|--------------|------|
| Elenco oggetti | `ls` |
:::

::: {.column width="65%"}
```{r}
#| output-location: column
ls()
```
:::
:::

::: columns
::: {.column width="35%"}
|                |      |
|----------------|------|
| Rimuovi oggetti | `rm` |
:::

::: {.column width="65%"}
```{r}
#| output-location: column
rm(tre_due_uno)
ls()
```
:::
:::

::: columns
::: {.column width="35%"}
|                      |        |
|----------------------|--------|
| L'oggetto *nullo*      | `NULL` |
| L'oggetto *mancante* | `NA`   |
:::

::: {.column width="65%"}
```{r}
#| output-location: column
#| results: hold
NULL
NA
```
:::
:::

## Matematica [overview - side-by-side]

::: columns
::: {.column width="35%"}
|             |             |
|-------------|-------------|
| Parentesi    | `(`, `)`    |
| Aggiungere | `+` |
| Sottrarre | `-` |
| Moltiplica | `*` |
| Dividere | `/` |
| Esponente | `^` o `**` |
| Radice quadrata | `sqrt` |
:::

::: {.column width="65%"}
<br><br><br>

```{r}
#| output-location: column
# Ordine di precedenza standard
5 + sqrt(4) / 2 * 3^(2 - 1)
```
:::
:::

::: columns
::: {.column width="35%"}
|           |                 |
|-----------|-----------------|
| ordine di grandezza | `<num>E<exp10>` |
:::

::: {.column width="65%"}
```{r}
#| output-location: column
1E2
```
:::
:::

::: columns
::: {.column width="35%"}
|             |       |
|-------------|-------|
| exponenziale | `exp` |
:::

::: {.column width="65%"}
```{r}
#| output-location: column
# Euler number
exp(1)
```
:::
:::

::: columns
::: {.column width="35%"}
|           |                        |
|-----------|------------------------|
| Logaritmo | `log`, `log10`, `log2` |
:::

::: {.column width="65%"}
```{r}
#| output-location: column
# È possibile comporre le funzioni
log(exp(1))
```
:::
:::

::: columns
::: {.column width="35%"}
|     |      |
|-----|------|
| Pi greco  | `pi` |
:::

::: {.column width="65%"}
```{r}
#| output-location: column
pi
```
:::
:::

::: columns
::: {.column width="35%"}
|      |       |
|------|-------|
| Seno | `sin` |
:::

::: {.column width="65%"}
```{r}
#| output-location: column
sin(pi/2)
```
:::
:::

::: columns
::: {.column width="35%"}
|        |       |
|--------|-------|
| Coseno | `cos` |
:::

::: {.column width="65%"}
```{r}
#| output-location: column
cos(pi)
```
:::
:::

## Logica e test [overview - side-by-side]

::: columns
::: {.column width="35%"}
|       |         |
|-------|---------|
| Vero  | `TRUE`  |
| Falso | `FALSE` |
| E   | `&`     |
| O    | `|`     |
| Non   | `!`     |
:::

::: {.column width="65%"}
<br>

```{r}
#| output-location: column
# Ordine di precedenza standard
TRUE & FALSE
```

```{r}
#| output-location: column
# Ordine di precedenza standard
!TRUE | TRUE
```

```{r}
#| output-location: column
!(TRUE | TRUE)
```
:::
:::

::: columns
::: {.column width="35%"}
|            |                      |
|------------|----------------------|
| Confronto | `<`, `<=`, `>`, `>=` |
:::

::: {.column width="65%"}
```{r}
#| output-location: column
sum(1:3) > 4
```
:::
:::

::: columns
::: {.column width="35%"}
|                |      |
|----------------|------|
| Equivalenza identica | `==` |
:::

::: {.column width="65%"}
```{r}
#| output-location: column
(1 + 2) == 3
```
:::
:::

::: columns
::: {.column width="35%"}
|                    |             |
|--------------------|-------------|
| Test su numeri uguali | `all.equal` |
:::

::: {.column width="65%"}
```{r}
#| output-location: column
3/5 == 0.6
```

```{r}
#| output-location: column
3*(1/5) == 0.6 # macchina finita
```

```{r}
#| output-location: column
all.equal(3*(1/5), 0.6)
```
:::
:::

::: columns
::: {.column width="35%"}
|           |      |
|-----------|------|
| Diverso | `!=` |
:::

::: {.column width="65%"}
```{r}
#| output-location: column
1 != 2
```
:::
:::


## Pacchetti

Un **pacchetto** è un contenitore di funzioni e dati.

Una **libreria** è una cartella del computer che contiene i pacchetti.

::: columns
::: {.column width="50%"}
|                  |                     |
|------------------|---------------------|
| Installare i pacchetti | `?install.packages` |
:::

::: {.column width="50%"}
```{r}
#| output-location: column
#| results: hold
install.packages("gtsummary")
```
:::
:::

::: columns
::: {.column width="50%"}
|                 |            |
|-----------------|------------|
| Allegare i pacchetti | `?library` |
:::

::: {.column width="50%"}
```{r}
#| output-location: column
#| results: hold
library("gtsummary")
```
:::
:::

::: columns
::: {.column width="50%"}
|          |                                |
|----------|--------------------------------|
| Manuale | `help(package = "<pkg_name>")` |
:::

::: {.column width="50%"}
```{r}
#| output-location: column
#| results: hold
help(package = "gtsummary")
```
:::
:::


::: columns
::: {.column width="50%"}
::: callout-important
*Installare* un pacchetto memorizza il suo codice eseguibile R in una libreria.<br>*Attaccare* un pacchetto consente di utilizzare le sue funzioni e il suo set di dati **all'interno della sessione R corrente**.

È necessario **installare** un pacchetto che si desidera utilizzare una sola volta.<br>Tutte le volte che si (ri)avvia una sessione R, è necessario **`library(<pkg>)`** di nuovo.
:::
:::

::: {.column width="50%"}
::: callout-important
Le funzioni e i dati sono identificati dai loro nomi (che non possono essere duplicati all'interno dello stesso pacchetto).

Attaccare un pacchetto a una sessione di R significa rendere disponibili i nomi delle sue funzioni e dei suoi dati per essere chiamati/utilizzati. In altre parole, avete ampliato il *linguaggio* (all'interno della sessione)!
:::
:::
:::


# Progetti R/RStudio

## Scripts

- Non è necessario utilizzare solo la console interattiva di R.
- È possibile salvare ciò che si digita/codifica per un uso futuro in script, cioè semplici file di testo contenenti codice. Se si tratta di script R, la loro estensione è `.R`, ad esempio `my-first-script.R`.

::: columns
::: {.column width="50%"}
![](img/rstudio-script.png)
:::

::: {.column width="50%"}
::: callout-tip
Cercate di creare script che funzionino come previsto mentre vengono eseguiti nel loro insieme da cima a fondo in una nuova sessione R pulita.
:::
:::
:::

## Progetti

Con i progetti RStudio, R imposta automaticamente la directory di lavoro della sessione nella cartella del progetto. Inoltre, RStudio salva automaticamente lo stato dello script del progetto, comprese le schede aperte.

Quindi, con i progetti rstudio, è possibile

::: columns
::: {.column width="50%"}
- chiudere e riaprire i vostri progetti senza perdere il vostro script (perderete gli oggetti R che avete creato con il vostro codice, ma potrete sempre ripristinarli eseguendo nuovamente i vostri script!)

- eseguire più sessioni di R contemporaneamente, ognuna collegata alla propria directory di lavoro, cioè lavorare efficacemente su più progetti.

- inviare/memorizzare i vostri progetti fuori dal computer e continuare a lavorare.
:::

::: {.column width="50%"}
![](img/rstudio-project.png)
:::
:::

## Directory di lavoro.

- I vostri script (con i vostri dati) sono la *fonte della verità* per quanto riguarda il vostro progetto di analisi!

- Voi/altri potete e dovete essere in grado di ricreare tutti i vostri risultati a partire dai vostri script e dai vostri dati.

### *Dove* sono le vostre analisi?

- Ogni sessione di R è automaticamente collegata a una cosiddetta *directory di lavoro*, cioè una cartella del vostro computer.

- Ogni volta che si imposta R per scrivere/salvare, leggere/caricare dal disco, R inizierà a cercare in quella cartella.

::: callout-tips
Si può sempre sapere qual è la propria directory di lavoro corrente tramite

```{r}
getwd()
```
:::


## Percorsi

::: columns
::: {.column width="50%"}
### Assoluto

- All'interno dei progetti non è necessario (e non si dovrebbe mai farlo!) usare un percorso assoluto per leggere o scrivere file e cartelle.

- I percorsi assoluti puntano a una cartella specifica in un computer specifico e non funzioneranno mai su altri sistemi o se spostate il progetto in una cartella diversa dello stesso PC.

Ad esempio, `C:\Users\<usr>\Documents\sscg-informatica\_progetto\analisi\`
:::

::: {.column width="50%"}
### Relativo

- All'interno dei progetti è possibile (e si dovrebbe sempre fare!) utilizzare un percorso relativo per leggere o scrivere file e cartelle.

- I percorsi relativi indicano un percorso relativo alla directory di lavoro corrente, in modo da funzionare sempre su PC diversi o se si sposta la cartella del progetto in un'altra posizione del computer.

Ad esempio, `_progetto\analisi\`
:::
:::

Su UNIX (linux/mac) i percorsi sono separati da slash (ad esempio, `percorso/per/cartella`), mentre su Windows sono separati da backslash (ad esempio, `percorso/per cartella`).

Tuttavia, in R (e in molti altri software), il backslash ha un significato speciale, per cui se dovete scrivere un percorso simile a quello di Windows in R, dovrete digitarlo due volte ogni volta (ad esempio, `percorso/cartella`).

::: callout-tip
D'altra parte, R comprende e può gestire entrambi gli standard in tutti i sistemi, cosicché, in R, è sempre possibile utilizzare il percorso UNIX-like, anche su macchine Windows.
:::

# Il pacchetto `{here}`


A volte la directory di lavoro può cambiare con o senza il nostro controllo.

::: columns
::: {.column width="50%"}
Per utilizzare `{here}` nei propri script, è sufficiente attaccarlo!

```{r}
library(here)
```

-   `here()` utilizza sempre percorsi relativi al progetto

    ```{r}
    here()
    ```

-   è possibile comporre percorsi senza preoccuparsi dello slash/backslash da utilizzare!

    ```{r}
    here("img", "here.png")
    here("img/here.png")
    ```
:::

::: {.column width="50%"}
![](img/here.png)
:::
:::

## Il Vostro turno

-  Aprite il vostro progetto RStudio Cloud
-  Create un nuovo script R (File > New File > R Script)
-  Salvate lo script come `fondamentali.R` nella cartella di lavoro del progetto
-  caricate i pacchetti `here`, `dplyr`, `gtsummary`, e caricateli nello script come prime righe di codice
-  provate del codice di esempio di base come operazioni matematiche, logiche, assegnazioni, ecc.

```{r}
#| echo: false
countdown(
  minutes = 3,
  left = "25%",
  right = "25%",
  top = "70%",
  bottom = 0,
  blink_colon = TRUE,
  play_sound = TRUE,
  margin = "5%",
  font_size = "4em"
)
```

## Riconoscimenti

Per creare questa lezione ho esplorato, utilizzato e adattato i contenuti delle seguenti risorse:

- Materiale del corso [Carpentries](https://carpentries.org/)' [Programming with R](https://swcarpentry.github.io/r-novice-inflammation/).
- [Carpentries](https://carpentries.org/)' [R for Reproducible Scientific Analysis](https://swcarpentry.github.io/r-novice-gapminder/).
- [Hadley Wickham](https://hadley.nz/) [Advanced R - (2e)](https://adv-r.hadley.nz)
- [R for Data Science (2e)](https://hadley.nz/) di [Hadley Wickham](https://r4ds.hadley.nz/)

Le diapositive sono state realizzate utilizzando [Posit](https://posit.co/) [Quarto](https://quarto.org/), sistema open-source di editoria scientifica e tecnica alimentato in R da [kintr](https://yihui.org/knitr/) (creato da [Yihui Xie](https://yihui.org/) ).


### License

```{=html}
 <p xmlns:cc="http://creativecommons.org/ns#" ><a rel="cc:attributionURL" href="https://github.com/CorradoLanera/sscg-informatica">Questo lavoro</a> di <a rel="cc:attributionURL dct:creator" property="cc:attributionName" href="https://github.com/CorradoLanera">Corrado Lanera</a> è offerto sotto licenza <a href="http://creativecommons.org/licenses/by/4.0/?ref=chooser-v1" target="_blank" rel="license noopener noreferrer" style="display:inline-block;">CC BY 4.0<img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1"><img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1"></a></p>
```
