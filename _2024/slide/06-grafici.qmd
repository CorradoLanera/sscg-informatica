---
title: '[Grafici]{style="color:darkorange;"}'
subtitle: "~30 min"
format:
  revealjs:
    width:  1648 #(3/2)
    height: 1080
    logo: img/UBEP.png
    footer: "SSCG Informatica di Base - I anno"
    slide-number: true
    history: false
    preview-links: auto
    code-link: true
    chalkboard:
      src: src/chalkboard-grafici.json
bibliography: references.bib
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(
  echo = TRUE
)
library(tidyverse)
library(countdown)
```


# `{ggplot2}`

La grammatica stratificata della grafica in R

## Preambolo: pipe nella composizione dei grafici

Creeremo grafici aggiungendo progressivamente quelli che chiameremo **strati** al grafico.

Solo per la composizione di grafici con `ggplot2`, abbiamo un *pipe* dedicato che è il segno più `+`, che ci ricorda che stiamo aggiungendo elementi/strati.

::: callout-tip
Le funzioni in `{ggplot2}` sono *nomi* e non *verbi*, proprio perché le *aggiungiamo* (in sequenza) al plot che stiamo creando![^2]
:::

[^2]: Se siete curiosi di sapere perché esiste una pipe distinta per ggplot? Date un'occhiata alla risposta dell'autore di `{ggplot2}`, Hadley Wickham [qui] (https://community.rstudio.com/t/why-cant-ggplot2-use/4372/7).


## Setup

Per prima cosa configuriamo il nostro ambiente per questa lezione e carichiamo alcuni dati.

::: callout-tip
## I dati

Il 14 novembre 2006 il direttore di una scuola superiore della Grande Copenaghen, in Danimarca, ha contattato le autorità sanitarie regionali per informarle di un'epidemia di diarrea e vomito tra i partecipanti a una cena scolastica tenutasi l'11 novembre 2006. Quasi tutti gli studenti e gli insegnanti della scuola (750 persone) avevano partecipato alla festa.
:::

```{r}
#| code-line-numbers: "1,9"
library(tidyverse)
library(here)
library(rio)

linelist <- here("data-raw/Copenhagen_clean.xlsx") |>
  import(setclass = "tibble") |>
  mutate(across(where(is.character), fct))

head(linelist) # for slides, first 6 obs only.
```


## Perché una grammatica stratificata per la grafica

Utilizzando il sistema `{ggplot2}` per creare grafici, non avremo bisogno di imparare tutti i comandi per produrre ogni grafico, ma potremo imparare un unico sistema, una grammatica, che ci renderà in grado di produrre quasi ogni tipo di grafico.

::: columns
::: {.column width="75%"}
`{ggplot2}` ci permetterà di costruire grafici da:

1. tracciare le informazioni nei nostri **dati**

2. mappare ciascuna di esse con l' **estetica** di nostra scelta (ad esempio, x, y, colori)

3. utilizzando la rappresentazione **geometrica** di cui abbiamo bisogno (ad esempio, punti, linee, barre)

4. dopo averli eventualmente trasformati in base a qualche **statistica**

5. di conseguenza a diversi **sistemi di coordinate** (ad esempio, polari)

6. magari **stratificando** il grafico per alcune informazioni contenute nei dati stessi

7. e personalizzarne il tema in base alle nostre esigenze stilistiche e ai metadati (ad esempio, titolo, etichette, ...).
:::

::: {.column width="25%"}
::: callout-important
Imparando la *grammatica* per controllare questi 7 componenti, possiamo costruire qualsiasi tipo di grafo utilizzando qualsiasi tipo di personalizzazione.
:::

::: callout-tip
Raramente avremo bisogno di utilizzare tutti questi componenti. In questo corso, forniremo le basi per 1-3 (necessarie per avere una trama), 6 e 7, mentre accenneremo solo a 4 e 5.
:::
:::
:::

## L'obiettivo pratico della lezione

```{r}
#| echo: false
linelist |>
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime
    )
  ) +
  geom_bar(fill = "blue") +
  geom_bar(
    aes(fill = sex),
    position = "dodge"
  ) +
  scale_x_datetime(
    date_breaks = "12 hours",
    labels = scales::label_date_short()
  ) +
  scale_y_continuous(
    breaks = scales::breaks_pretty()
  ) +
  facet_grid(
    group ~ class,
    scales = "free_y",
    labeller = "label_both"
  ) +
  scale_y_continuous(
    breaks = scales::breaks_pretty()
  ) +
  labs(
    ## aesthetics used titles
    x = "Onset date",
    y = "Count (N person)",
    fill = "Sex",
    ## plot metadata
    title = "Distribution of cases across days.",
    subtitle = "Stratified by group and class.",
    caption = "Data from ECDC EPIET Outbreak Investigation (https://github.com/EPIET/OutbreakInvestigation)."
  ) +
  theme_bw() +
  theme(
    legend.position = "top"
  )
```

## Componenti di un grafico `ggplot`

![Image adapted from [Grammar of Graphics](https://link.springer.com/book/10.1007/0-387-28695-0)](img/ggplot-layers.png)

## 1. Data {auto-animate="true"}

Ogni parte del grafico sarà costruita utilizzando una singola variabile dei nostri dati, in modo da poter costruire il grafico in base ai dati che abbiamo e, dall'altro lato, possiamo controllare qualsiasi parte del grafico in base ai nostri dati.

::: columns
::: {.column width="35%"}
```{r}
#| output-location: default
#| eval: false
ggplot(linelist)
```
:::

::: {.column width="65%"}
```{r}
#| output-location: default
#| echo: false
ggplot(linelist)
```

::: callout-important
Tutti i grafici di `{ggplot2}` partono da dati tabellari, chiamando `ggplot` su di essi.
:::

::: callout-tip
La chiamata a `ggplot` sui dati fornisce una tela bianca per iniziare a costruire il grafico.
:::
:::
:::

## 1. Data {auto-animate="true"}

Ogni parte del grafico sarà costruita utilizzando una singola variabile dei nostri dati, in modo da poter costruire il grafico in base ai dati che abbiamo e, dall'altro lato, possiamo controllare qualsiasi parte del grafico in base ai nostri dati.

::: columns
::: {.column width="35%"}
```{r}
#| output-location: default
#| eval: false
linelist |>  # start from data, and than...
  ggplot()  # create a plot
```
:::

::: {.column width="65%"}
```{r}
#| output-location: default
#| echo: false
linelist |>  # start from data, and than
  ggplot()  # create a plot
```

::: callout-important
Tutti i grafici di `{ggplot2}` partono da dati tabellari, chiamando `ggplot` su di essi.
:::

::: callout-tip
La chiamata a `ggplot` sui dati fornisce una tela bianca per iniziare a costruire il grafico.
:::
:::
:::

## 2. Aesthetics {auto-animate="true"}

Supponiamo di voler analizzare la distribuzione del tempo di insorgenza. Dovremmo mappare la variabile `onset_datetime` sull'asse x!

::: columns
::: {.column width="35%"}
```{r}
#| code-line-numbers: "3-5"
#| output-location: default
#| eval: false
linelist |>  # start from data, and than
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime
    )
  )
```
:::

::: {.column width="65%"}
```{r}
#| code-line-numbers: "3-5"
#| output-location: default
#| echo: false
linelist |>  # start from data, and than
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime
    )
  )
```

::: callout-important
La funzione `aes` mappa le variabili all'estetica del nostro grafico.
:::
:::
:::

##  `aes`tetiche principali (overview)

::: callout-important
Si usa `aes`tetiche per *visualizzare i dati*.
:::

-   `x`, `y`: posizione lungo gli assi x e y.

-   `alpha`: la trasparenza delle geometrie.

-   `colour`: il colore delle geometrie in base ai dati.

-   `fill`: il colore interno delle geometrie.

-   `group`: a quale gruppo appartiene una geometria.

-   `linetype`: il tipo di linea utilizzata (solid, dotted, ecc.).

-   `shape`: la forma dei punti.

-   `size`: la dimensione dei punti o delle linee.

## 3. Geometrie

Una volta ottenuta la tela e le mappature, possiamo *aggiungere* un livello geometrico. In questo caso, vogliamo aggiungere delle barre per il "tempo_nascita" (cioè, x).

::: columns
::: {.column width="35%"}
```{r}
#| code-line-numbers: "7"
#| output-location: default
#| eval: false
linelist |>  # start from data, and than
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime
    )
  ) +
  geom_bar() # drawing bars
```

::: callout-tip
Nella descrizione dell'aiuto di ogni `geom_*` ci sono i requisiti estetici che deve avere per essere usato.
:::
:::

::: {.column width="65%"}
```{r}
#| code-line-numbers: "7"
#| output-location: default
#| echo: false
linelist |>  # start from data, and than
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime
    )
  ) +
  geom_bar()
```

::: callout-important
Tutte le funzioni di geometria sono chiamate `geom_*`, con `*` che indica il tipo di geometria:

`?geom_point`, `?geom_line`, `?geom_bar`, `?geom_boxplot`, `?gome_histogram`, ...
:::
:::
:::

## Principalli `geom_*`etrie (overview)

::: callout-important
Si usa `geom_*`etrie per *formare i dati*.
:::

-   `geom_point`: grafico a dispersione

-   `geom_line`: linee che collegano i punti

-   `geom_smooth`: linea di funzione basata sui dati

-   `geom_boxplot`: box plot per variabili categoriche

-   `geom_bar`: grafici a barre per assi x categorici

-   `geom_histogram`: istogramma per asse x continuo

-   `geom_violin`: kernel di distribuzione della dispersione dei dati

-   `geom_path`: linee che collegano punti in sequenza di apparizione

## mappe `aes`tiche vs parametri `aes`tetici parameters?

Supponiamo di voler riempire le barre di blu.

Perché questo produce barre rosse e la legenda riporta "fill" come intestazione e "blue" come livello?

::: columns
::: {.column width="35%"}
```{r}
#| code-line-numbers: "5"
#| output-location: default
#| eval: false
linelist |>  # start from data, and than
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime,
      fill = "blue"
    )
  ) +
  geom_bar()
```
:::

::: {.column width="65%"}
```{r}
#| code-line-numbers: "5"
#| output-location: default
#| echo: false
linelist |>  # start from data, and than
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime,
      fill = "blue"
    )
  ) +
  geom_bar()
```
:::
:::

## mappe `aes`tiche vs parametri `aes`tetici parameters!

Supponiamo di voler riempire le barre di blu.

Perché questo produce barre blu e non c'è alcuna legenda?

::: columns
::: {.column width="35%"}
```{r}
#| code-line-numbers: "7"
#| output-location: default
#| eval: false
linelist |>  # start from data, and than
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime
    )
  ) +
  geom_bar(fill = "blue")
```
:::

::: {.column width="65%"}
```{r}
#| code-line-numbers: "7"
#| output-location: default
#| echo: false
linelist |>  # start from data, and than
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime
    )
  ) +
  geom_bar(fill = "blue")
```
:::
:::

::: callout-important
Per avere un grafico a barre blu, inserire il parametro all'interno della chiamata `geom_*`etry e **fuori dalla chiamata `aes`**: questi sono parametri usati per impostare l'estetica a un valore fisso, come `colour = "rosso"` o `size = 3`, invece di mappare i dati all'estetica!
:::

## `geom_*`etrie multiple

Si possono anche *aggiungere* più `geom_*`etries uno *in cima* agli altri. In questo caso, potrebbe essere utile impostare `aes`tetiche personalizzate e personalizzare la posizione dei geom.

::: columns
::: {.column width="35%"}
```{r}
#| code-line-numbers: "8-11"
#| output-location: default
#| eval: false
linelist |>  # start from data, and than
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime
    )
  ) +
  geom_bar(fill = "blue") +
  geom_bar(
    aes(fill = sex),
    position = "dodge"
  )
```

::: callout-tip
Si possono impostare anche `aes`tetiche all'interno di un singolo `geom_*` senza influenzare gli altri.
:::

::: callout-important
Vorremmo anche impostare la *posizione* del `geom_*` che stiamo creando.
:::
:::

::: {.column width="65%"}
```{r}
#| code-line-numbers: "8-11"
#| output-location: default
#| echo: false
linelist |>  # start from data, and than
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime
    )
  ) +
  geom_bar(fill = "blue") +
  geom_bar(
    aes(fill = sex),
    position = "dodge"
  )
```
:::
:::

## `geom_*`etrie multiple

Si possono anche *aggiungere* più `geom_*`etries uno *in cima* agli altri. In questo caso, potrebbe essere utile impostare `aes`thetiche personalizzate e personalizzare la posizione dei geom.

::: columns
::: {.column width="35%"}
```{r}
#| code-line-numbers: "7-11"
#| output-location: default
#| eval: false
linelist |>  # start from data, and than
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime
    )
  ) +
  geom_bar(
    aes(fill = sex),
    position = "dodge"
  )
  geom_bar(fill = "blue")
```
:::

::: {.column width="65%"}
```{r}
#| code-line-numbers: "7-11"
#| output-location: default
#| echo: false
linelist |>  # start from data, and than
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime
    )
  ) +
  geom_bar(
    aes(fill = sex),
    position = "dodge"
  ) +
  geom_bar(fill = "blue")
```

::: callout-important
I `geom_*` sono **aggiunti** in ordine, quindi l'operazione NON è commutativa!
:::
:::
:::

## `position`i principali (overview)

::: callout-important
Si usa la `position` per **posizionare** i componenti del `geom_*`.
:::

-   `"stack"`: (default) più barre che occupano la stessa posizione `x` saranno impilate l'una sull'altra.

-   `"dodge"`: affiancati da un lato all'altro.

-   `"fill"`: mostra le proporzioni relative a ogni x impilando le barre e standardizzando ogni barra in modo che abbia la stessa altezza.

-   `"jitter"`: aggiunge un rumore casuale a una trama rendendola più facile da leggere, a volte.

## Modello base {auto-animate="true"}

Finora, possiamo disporre di un insieme minimo di istruzioni per definire un modello di base per le nostre trame.

``` r
<DATA> |>
  ggplot(
    aes(<GLOBAL_MAPPINGS>)
  ) +
    <GEOM_FUNCTION>(
      aes(<LOCAL_MAPPINGS>)
    )
```

## Modello base (+ opzioni) {auto-animate="true"}

Finora, possiamo disporre di un insieme minimo di istruzioni per definire un modello di base per le nostre trame.

``` r
<DATA> |>
  ggplot(
    aes(<GLOBAL_MAPPINGS>)
  ) +
    <GEOM_FUNCTION>(
      aes(<LOCAL_MAPPINGS>),
      position = <LOCAL_POSITION>, # optional
      <AESTHETIC> = <LOCAL_CONSTANT> # optional
    )
```

::: callout-important
Le mappature locali `aes`tetiche sovrascrivono quelle globali!
:::


## Scale (overview)

Le scale controllano il passaggio dai dati all'estetica. Sono necessarie per avere un grafico, ma spesso vengono impostate automaticamente. Possiamo personalizzarle per avere un migliore controllo sulla trama.

::: columns
::: {.column width="35%"}
```{r}
#| code-line-numbers: "12-18"
#| output-location: default
#| eval: false
linelist |>  # start from data, and than
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime
    )
  ) +
  geom_bar(fill = "blue") +
  geom_bar(
    aes(fill = sex),
    position = "dodge"
  ) +
  scale_x_datetime(
    date_breaks = "12 hours",
    labels = scales::label_date_short()
  ) +
  scale_y_continuous(
    breaks = scales::breaks_pretty()
  )
```

::: callout-important
I nomi delle scale sono composti come `scale_<aes>_<type>`, dove `<aes>` è l'estetica e `<type>` è il tipo di scala.

see `?scale_y_continuous`, and `?scale_x_datetime`.
:::
:::

::: {.column width="65%"}
```{r}
#| code-line-numbers: "12-18"
#| output-location: default
#| echo: false
linelist |>  # start from data, and than
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime
    )
  ) +
  geom_bar(fill = "blue") +
  geom_bar(
    aes(fill = sex),
    position = "dodge"
  ) +
  scale_x_datetime(
    date_breaks = "12 hours",
    labels = scales::label_date_short()
  ) +
  scale_y_continuous(
    breaks = scales::breaks_pretty()
  )
```

::: callout-tip
Il pacchetto `{scales}` fornisce un insieme di funzioni per personalizzare le scale. Abbiamo usato `label_date_short` e `breaks_pretty` per avere un migliore controllo sulle etichette e sulle interruzioni.
:::
:::
:::

## Facets (overview)

Possiamo quindi stratificare la nostra trama in base ai livelli di uno o due dati discreti nel nostro set di dati, creando trame distinte con i dati per ogni classe, visualizzati in sfaccettature distinte.

::: columns
::: {.column width="35%"}
```{r}
#| code-line-numbers: "19-21"
#| output-location: default
#| eval: false
linelist |>  # start from data, and than
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime
    )
  ) +
  geom_bar(fill = "blue") +
  geom_bar(
    aes(fill = sex),
    position = "dodge"
  ) +
  scale_x_datetime(
    date_breaks = "12 hours",
    labels = scales::label_date_short()
  ) +
  scale_y_continuous(
    breaks = scales::breaks_pretty()
  ) +
  facet_grid(
    group ~ class
  )
```

::: callout-important
`facet_grid` forma una matrice di pannelli definita da variabili di sfaccettatura di riga e colonna.
:::
:::

::: {.column width="65%"}
```{r}
#| code-line-numbers: "19-21"
#| output-location: default
#| echo: false
linelist |>  # start from data, and than
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime
    )
  ) +
  geom_bar(fill = "blue") +
  geom_bar(
    aes(fill = sex),
    position = "dodge"
  ) +
  scale_x_datetime(
    date_breaks = "12 hours",
    labels = scales::label_date_short()
  ) +
  scale_y_continuous(
    breaks = scales::breaks_pretty()
  ) +
  facet_grid(
    group ~ class
  )
```

::: callout-tip
`facet_grid` è più utile quando si hanno due variabili discrete e tutte le combinazioni delle variabili esistono nei dati. Se si dispone di una sola variabile con molti livelli, provare con `?facet_wrap`.
:::
:::
:::

## Sfaccettature (facet) (overview)

Possiamo quindi stratificare la nostra trama in base ai livelli di uno o due dati discreti nel nostro set di dati, creando trame distinte con i dati per ogni classe, visualizzati in sfaccettature distinte.

::: columns
::: {.column width="35%"}
```{r}
#| code-line-numbers: "19-23"
#| output-location: default
#| eval: false
linelist |>  # start from data, and than
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime
    )
  ) +
  geom_bar(fill = "blue") +
  geom_bar(
    aes(fill = sex),
    position = "dodge"
  ) +
  scale_x_datetime(
    date_breaks = "12 hours",
    labels = scales::label_date_short()
  ) +
  scale_y_continuous(
    breaks = scales::breaks_pretty()
  ) +
  facet_grid(
    group ~ class,
    scales = "free_y",
    labeller = "label_both"
  )
```
:::

::: {.column width="65%"}
```{r}
#| code-line-numbers: "19-23"
#| output-location: default
#| echo: false
linelist |>  # start from data, and than
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime
    )
  ) +
  geom_bar(fill = "blue") +
  geom_bar(
    aes(fill = sex),
    position = "dodge"
  ) +
  scale_x_datetime(
    date_breaks = "12 hours",
    labels = scales::label_date_short()
  ) +
  scale_y_continuous(
    breaks = scales::breaks_pretty()
  ) +
  facet_grid(
    group ~ class,
    scales = "free_y",
    labeller = "label_both"
  )
```

::: callout-tip
- `scales`: le scale sono condivise tra tutte le sfaccettature (il valore predefinito è "free"), oppure variano tra le righe ("free_x"), le colonne ("free_y") o sia le righe che le colonne ("free")?

- `labeller` predefinita (cioè, `"label_value"`) etichetta le righe e le colonne con i loro nomi; `"label_both"` visualizza sia il nome della variabile che il valore del fattore.
:::
:::
:::

## Personalizzare i metadati: etichette primarie

Ora possiamo iniziare a renderlo più bello, aggiungendo e migliorando alcuni testi ed etichette, come il titolo, le etichette degli assi e della legenda e una didascalia.

::: columns
::: {.column width="35%"}
```{r}
#| code-line-numbers: "24-32"
#| output-location: default
#| eval: false
linelist |>  # start from data, and than
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime
    )
  ) +
  geom_bar(fill = "blue") +
  geom_bar(
    aes(fill = sex),
    position = "dodge"
  ) +
  scale_x_datetime(
    date_breaks = "12 hours",
    labels = scales::label_date_short()
  ) +
  scale_y_continuous(
    breaks = scales::breaks_pretty()
  ) +
  facet_grid(
    group ~ class,
    scales = "free_y"
  ) +
  labs(
    ## aesthetics used titles
    x = "Onset date",
    y = "Count (N person)",
    fill = "Sex",
    ## plot metadata
    title = "Distribution of cases across days.",
    subtitle = "Stratified by group and class.",
    caption = "Data from ECDC EPIET Outbreak Investigation (https://github.com/EPIET/OutbreakInvestigation)."
  )
```
:::

::: {.column width="65%"}
```{r}
#| code-line-numbers: "24-32"
#| output-location: default
#| echo: false
linelist |>  # start from data, and than
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime
    )
  ) +
  geom_bar(fill = "blue") +
  geom_bar(
    aes(fill = sex),
    position = "dodge"
  ) +
  scale_x_datetime(
    date_breaks = "12 hours",
    labels = scales::label_date_short()
  ) +
  scale_y_continuous(
    breaks = scales::breaks_pretty()
  ) +
  facet_grid(
    group ~ class,
    scales = "free_y",
    labeller = "label_both"
  ) +
  labs(
    ## aesthetics used titles
    x = "Onset date",
    y = "Count (N person)",
    fill = "Sex",
    ## plot metadata
    title = "Distribution of cases across days.",
    subtitle = "Stratified by group and class.",
    caption = "Data from ECDC EPIET Outbreak Investigation (https://github.com/EPIET/OutbreakInvestigation)."
  )

```
:::
:::

## Tema (overview)

Molte altre opzioni possono essere prese in considerazione per perfezionare l'aspetto della nostra trama.

::: columns
::: {.column width="35%"}
```{r}
#| code-line-numbers: "33-36"
#| output-location: default
#| eval: false
linelist |>  # start from data, and than
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime
    )
  ) +
  geom_bar(fill = "blue") +
  geom_bar(
    aes(fill = sex),
    position = "dodge"
  ) +
  scale_x_datetime(
    date_breaks = "12 hours",
    labels = scales::label_date_short()
  ) +
  scale_y_continuous(
    breaks = scales::breaks_pretty()
  ) +
  facet_grid(
    group ~ class,
    scales = "free_y",
    labeller = "label_both"
  ) +
  labs(
    ## aesthetics used titles
    x = "Onset date",
    y = "Count (N person)",
    fill = "Sex",
    ## plot metadata
    title = "Distribution of cases across days.",
    subtitle = "Stratified by group and class.",
    caption = "Data from ECDC EPIET Outbreak Investigation (https://github.com/EPIET/OutbreakInvestigation)."
  ) +
  theme_bw() +
  theme(
    legend.position = "top"
  )

```
:::

::: {.column width="65%"}
```{r}
#| code-line-numbers: "33-36"
#| output-location: default
#| echo: false
linelist |>  # start from data, and than
  ggplot(  # create a plot
    aes(  # with aesthetics:
      x = onset_datetime
    )
  ) +
  geom_bar(fill = "blue") +
  geom_bar(
    aes(fill = sex),
    position = "dodge"
  ) +
  scale_x_datetime(
    date_breaks = "12 hours",
    labels = scales::label_date_short()
  ) +
  scale_y_continuous(
    breaks = scales::breaks_pretty()
  ) +
  facet_grid(
    group ~ class,
    scales = "free_y",
    labeller = "label_both"
  ) +
  scale_y_continuous(
    breaks = scales::breaks_pretty()
  ) +
  labs(
    ## aesthetics used titles
    x = "Onset date",
    y = "Count (N person)",
    fill = "Sex",
    ## plot metadata
    title = "Distribution of cases across days.",
    subtitle = "Stratified by group and class.",
    caption = "Data from ECDC EPIET Outbreak Investigation (https://github.com/EPIET/OutbreakInvestigation)."
  ) +
  theme_bw() +
  theme(
    legend.position = "top"
  )
```
:::
:::

## Temi: vetrina (overview)

I parametri personalizzati del tema sono molti, qui riportiamo una rappresentazione di alcuni di essi.

![Theme Elements Reference Sheet by [Isabella Benabaye](https://isabella-b.com/blog/ggplot2-theme-elements-reference/)](img/ggplot2-theme-elements-reference-v2.png)

## Un modello più completo

Possiamo finalmente disporre di un insieme più ampio di istruzioni per definire un modello più esaustivo per le nostre trame.

```{r}
#| eval: false
#| output-location: default
<DATA> |>
  ggplot(
    aes(<GLOBAL_MAPPINGS>)
  ) +
    <GEOM_FUNCTION>(
      aes(<LOCAL_MAPPINGS>),
      position = <LOCAL_POSITION>,
      <AESTHETIC> = <LOCAL_CONSTANT>
    ) +
    <SCALE_FUNCTION> +
    <FACET_FUNCTION> +
    labs(
      ## aesthetics
      <AES_NAME> = "<TEXT>",

      ## meta-data
      <METADATA_NAME> = "<TEXT>"
    ) +
    <THEME>()
```

## Salvare i grafici

Per salvare un grafico ggplot sul disco, si può chiamare la funzione `ggsave`. Sono supportati molti tipi di output.

::: columns
::: {.column width="35%"}
``` r
epicurve <- linelist |>
  ggplot(aes(...)) +
  geom_bar(...) +
  scales_x_datetime(...) +
  scales_y_continuous(...) +
  facet_grid(...) +
  labs(...) +
  theme(...)
```
:::

::: {.column width="65%"}
```{r}
#| eval: false
#| output-location: default
ggsave("epicurve.pdf", plot = epicurve)
ggsave("epicurve.png", plot = epicurve)
ggsave("epicurve.jpeg", plot = epicurve)
ggsave("epicurve.tiff", plot = epicurve)
ggsave("epicurve.bmp", plot = epicurve)
ggsave("epicurve.svg", plot = epicurve)
ggsave("epicurve.eps", plot = epicurve)
ggsave("epicurve.ps", plot = epicurve)
ggsave("epicurve.tex", plot = epicurve)

```
:::
:::

::: callout-tip
- L'argomento `plot` di `ggsave` è opzionale, se non viene specificato viene salvato l'ultimo plot creato e visualizzato!

- La funzione `ggsave` indovina il tipo di file grafico dall'estensione del nome del file richiesto.
:::




## Grazie per l'attenzione!

Per ogni domanda, dubbio, o curiosità non esitate a contattarmi: [corrado.lanera@ubep.unipd.it](mailto:corrado.lanera@ubep.unipd.it)

### Riconoscimenti

Per creare questa lezione ho esplorato, utilizzato e adattato i contenuti delle seguenti risorse:

-   Materiale del corso [Carpentries](https://carpentries.org/)' [Programming with R](https://swcarpentry.github.io/r-novice-inflammation/).
-   [Carpentries](https://carpentries.org/)' [R for Reproducible Scientific Analysis](https://swcarpentry.github.io/r-novice-gapminder/).
-   [Hadley Wickham](https://hadley.nz/) [Advanced R - (2e)](https://adv-r.hadley.nz)
-   [R for Data Science (2e)](https://hadley.nz/) di [Hadley Wickham](https://r4ds.hadley.nz/)

Le diapositive sono state realizzate utilizzando [Posit](https://posit.co/) [Quarto](https://quarto.org/), sistema open-source di editoria scientifica e tecnica alimentato in R da [kintr](https://yihui.org/knitr/) (creato da [Yihui Xie](https://yihui.org/) ).

### License

```{=html}
 <p xmlns:cc="http://creativecommons.org/ns#" ><a rel="cc:attributionURL" href="https://github.com/CorradoLanera/sscg-informatica">Questo lavoro</a> di <a rel="cc:attributionURL dct:creator" property="cc:attributionName" href="https://github.com/CorradoLanera">Corrado Lanera</a> è offerto sotto licenza <a href="http://creativecommons.org/licenses/by/4.0/?ref=chooser-v1" target="_blank" rel="license noopener noreferrer" style="display:inline-block;">CC BY 4.0<img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1"><img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1"></a></p>
```
